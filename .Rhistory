?gsub
grep('[A-Z-[B]]', c('AB', 'AA', 'BC', 'AC'))
grep('[A-Z-[B]]', c('AB', 'AA', 'BC', 'AC'), perl = T)
grep('[a-z-[B]]', c('AB', 'AA', 'BC', 'AC'), perl = T)
grep('[a-z-[b]]', c('AB', 'AA', 'BC', 'AC'), perl = T)
grep('[a-z-[b]]', c('AB', 'AA', 'BC', 'AC', 'B'), perl = T)
grep('[a-z-[b]]', c('A'), perl = T)
grep('[A-Z-[b]]', c('A'), perl = T)
grep('[A-Z-[b]]', 'C', perl = T)
grep('[A-Z-[B]]', 'C', perl = T)
grep('[\w-[B]]', 'C', perl = T)
grep('[\w-[B]]', 'C', perl = T)
grep('[\\w-[B]]', 'C', perl = T)
grep('[C-[B]]', 'C', perl = T)
grep('[C]', 'C', perl = T)
x <- 'The quick brown fox jumps over the lazy dog'
x <- 'The cat walked down the catwalk.'
regexpr(pattern = 'cat', text = x, perl = T)
gregexpr(pattern = 'cat', text = x, perl = T)
regmatches(x, gregexpr(pattern = 'cat', text = x, perl = T))
regmatches(x, gregexpr(pattern = 'cat\w+', text = x, perl = T))
regmatches(x, gregexpr(pattern = 'cat\\w+', text = x, perl = T))
regmatches(x, gregexpr(pattern = 'cat\\w*', text = x, perl = T))
x <- 'The cat walked down the catwalk.'
findAll <- function(pattern, x) {
regmatches(x, gregexpr(pattern = pattern, text = x, perl = T))
}
findAll(pattern = 'cat\\w+', x = x)
findAll(pattern = 'cat\\w*', x = x)
findAll(pattern = 'cat', x = x)
findAll(pattern = 'cat.', x = x)
findAll(pattern = '[abc]', x = x)
findAll(pattern = '[abc].', x = x)
findAll(pattern = '[^abc]', x = x)
findAll(pattern = '^The ...', x)
x <- 'the cat walked down the catwalk.'
findAll(pattern = '^the ...', x)
findAll(pattern = 'the ...', x)
findAll(pattern = 'walk$', x)
findAll(pattern = 'walk$', x)
x <- 'the cat walked down the catwalk'
findAll(pattern = 'walk$', x)
findAll(pattern = '...walk$', x)
findAll(pattern = 'cat*', x = x)
findAll(pattern = 'cat+', x = x)
findAll(pattern = 'ca+', x = x)
findAll(pattern = '[a-z]', x = x)
x <- 'the cat walked down the steep catwalk'
findAll(pattern = 'ste*', x = x)
findAll(pattern = 'slip*ery', x = x)
x <- 'the cat walked down the slippery catwalk'
findAll(pattern = 'slip*ery', x = x)
findAll(pattern = 'slip+ery', x = x)
findAll(pattern = '.*', x = x)
x <- 'the cat walked down the slippery catwalk'
findAll <- function(pattern, x) {
regmatches(x = x,
m = gregexpr(pattern = pattern,
text = x,
perl = T))[[1]]
}
# Can use it to simply find 'cat' twice in the string
findAll(pattern = 'cat', x = x)
# ^ Could be useful in very simple cases
# Lets get into special characters
# Dot
# We can match 'cat' followed by any character
findAll(pattern = 'cat.', x = x)
# Brackets
# We can match a character from a set of characters
findAll(pattern = '[abc]', x = x)
# Combining what we have seen so far
findAll(pattern = '[abc].', x = x)
# Within the brackets, you can also define ranges
findAll(pattern = '[a-z]', x = x)
# Caret
# We can negate characters in square brackets
findAll(pattern = '[^abc]', x = x)
# Caret (again) and dollar sign
# Outside of square brackets, we can indicate the beginning of a string
findAll(pattern = '^the ...', x = x)
# ^ Note that if we took out the caret, we would have two matches
# Similarly, we can indicate the end of the string
findAll(pattern = '...walk$', x = x)
# Asterisk and plus sign
# We can match either 0 or more of the previous character
findAll(pattern = 'slip*ery', x = x)
# Similarly, we can match either 1 or more of the previous character
findAll(pattern = 'slip+ery', x = x)
# Note that this can be useful when you have an arbitrary number of repeated characters
# For example, the following will match the whole string
findAll(pattern = '.*', x = x)
findAll(pattern = '.{2, 3}', x = x)
findAll(pattern = 'p{2, 3}', x = x)
findAll(pattern = 'p{1, 3}', x = x)
findAll(pattern = 'p{1,3}', x = x)
findAll(pattern = '.{1,3}', x = x)
findAll(pattern = ' (...) ', x = x)
gregexpr(pattern = ' (...) ',
text = x,
perl = T)
regexpr(pattern = ' (...) ',
text = x,
perl = T)
x <- 'the cat walked down the slippery catwalk'
findAll <- function(pattern, x) {
regmatches(x = x,
m = regexpr(pattern = pattern,
text = x,
perl = T))[[1]]
}
# Can use it to simply find 'cat' twice in the string
findAll(pattern = 'cat', x = x)
# ^ Could be useful in very simple cases
# Lets get into special characters
# Dot
# We can match 'cat' followed by any character
findAll(pattern = 'cat.', x = x)
# Brackets
# We can match a character from a set of characters
findAll(pattern = '[abc]', x = x)
# Combining what we have seen so far
findAll(pattern = '[abc].', x = x)
# Within the brackets, you can also define ranges
findAll(pattern = '[a-z]', x = x)
# Caret
# We can negate characters in square brackets
findAll(pattern = '[^abc]', x = x)
# Caret (again) and dollar sign
# Outside of square brackets, we can indicate the beginning of a string
findAll(pattern = '^the ...', x = x)
# ^ Note that if we took out the caret, we would have two matches
# Similarly, we can indicate the end of the string
findAll(pattern = '...walk$', x = x)
# Asterisk and plus sign
# We can match either 0 or more of the previous character
findAll(pattern = 'slip*ery', x = x)
# Similarly, we can match either 1 or more of the previous character
findAll(pattern = 'slip+ery', x = x)
# Note that this can be useful when you have an arbitrary number of repeated characters
# For example, the following will match the whole string
findAll(pattern = '.*', x = x)
# Curly bracket
# We can match between m and n more of the previous character
findAll(pattern = '.{1,3}', x = x)
# Parenthesis and newline
# We can run subexpressions and capture their output
findAll(pattern = ' (...) ', x = x)
findAll(pattern = ' (...) ', x = x)
findAll(pattern = ' ... ', x = x)
findAll <- function(pattern, x) {
regmatches(x = x,
m = regexpr(pattern = pattern,
text = x,
perl = T))[[1]]
}
x <- 'the cat walked down the slippery catwalk'
findAll <- function(pattern, x) {
regmatches(x = x,
m = gregexpr(pattern = pattern,
text = x,
perl = T))[[1]]
}
# Can use it to simply find 'cat' twice in the string
findAll(pattern = 'cat', x = x)
# ^ Could be useful in very simple cases
# Lets get into special characters
# Dot
# We can match 'cat' followed by any character
findAll(pattern = 'cat.', x = x)
# Brackets
# We can match a character from a set of characters
findAll(pattern = '[abc]', x = x)
# Combining what we have seen so far
findAll(pattern = '[abc].', x = x)
# Within the brackets, you can also define ranges
findAll(pattern = '[a-z]', x = x)
# Caret
# We can negate characters in square brackets
findAll(pattern = '[^abc]', x = x)
# Caret (again) and dollar sign
# Outside of square brackets, we can indicate the beginning of a string
findAll(pattern = '^the ...', x = x)
# ^ Note that if we took out the caret, we would have two matches
# Similarly, we can indicate the end of the string
findAll(pattern = '...walk$', x = x)
# Asterisk and plus sign
# We can match either 0 or more of the previous character
findAll(pattern = 'slip*ery', x = x)
# Similarly, we can match either 1 or more of the previous character
findAll(pattern = 'slip+ery', x = x)
# Note that this can be useful when you have an arbitrary number of repeated characters
# For example, the following will match the whole string
findAll(pattern = '.*', x = x)
# Curly bracket
# We can match between m and n more of the previous character
findAll(pattern = '.{1,3}', x = x)
# Parenthesis and newline
# We can run subexpressions and capture their output
# NOTE: R does not do a great job of this
# One option using base R
findAll(pattern = ' ... ', x = x)
findAll(pattern = ' (...) ', x = x)
library(railhelperfuns)
GetFailureCodeDescription('40_040')
GetFailureCodeDescription('99_021')
library('caret')
library('randomForest')
setwd('/Users/bsilva/repos/DS-Case-Question/scripts')
# Candidate Name
candidateName <- readline("Enter Candidate Name: \n")
library('caret')
library('randomForest')
setwd('/Users/bsilva/repos/DS-Case-Question/scripts')
# Candidate Name
candidateName <- readline("Enter Candidate Name: \n")
candidateTestPath <- paste("../",candidateName,"/testingCandidate.csv", sep="")
# File path and file name of the data that contains the actual profit and responses
# For grading any candidate before August 1, 2016, please use testing.csv
# From now and after August 1, 2016, please use testing_fix.csv
referenceTrainingPath <- "../data/testing_fix.csv"
# Output file path
outputPath <- "../scoreFiles"
# Ensure this is the same as the case description
costPerContact = 30
# First Scoring Model: Whether or not people will respond #########################
testing <- read.csv(file = referenceTrainingPath, header = TRUE,
na.strings=c("NA","999"))
#cleaning the testing data for scoring model
testing$profit[is.na(testing$profit)]<-0
testing$profit=testing$profit-costPerContact
testing$schooling[is.na(testing$schooling)]<-"unknown"
testing$custAge[is.na(testing$custAge)]<-mean(testing$custAge, na.rm=TRUE)
testing$logcustAge<-log(testing$custAge)
testing$pmonths <-NULL
dummy <- dummyVars(~., data=testing)
testing_dummied <- data.frame(predict(dummy, testing))
print(head(testing_dummied))
testing_dummied$responded.no<-NULL
testing_dummied$profit<-NULL
testing_dummied$id<-NULL
testing_dummied$profession.unknown<-NULL
testing_dummied$marital.unknown<-NULL
testing_dummied$schooling.unknown<-NULL
testing_dummied$default.unknown<-NULL
testing_dummied$housing.unknown<-NULL
testing_dummied$loan.unknown<-NULL
rf <- train(as.factor(responded.yes)~., data=testing_dummied,
method = "rf",
trControl = trainControl(method = "oob"),
importance = TRUE,
verbose = TRUE )
fm <- rf$finalModel
v <-varImp(fm, Scale=TRUE)
v$varnames<-rownames(v)
v$Overall<-v$"1"
p<-ggplot(v, aes(x=reorder(varnames,Overall), y=Overall)) +
geom_bar(stat='identity') +
coord_flip()+
xlab("")+
ylab("relative importance")+
ggtitle("Variable importance for positive responses")
ggsave("../scoreFiles/varImp_response.png",p, dpi=100)
# Second Scoring Model: Whether or not peopel will respond and have a profit###########
rf <- train(as.factor(responded.yes)~., data=testing_dummied,
method = "rf",
trControl = trainControl(method = "oob"),
importance = TRUE,
verbose = TRUE )
fm <- rf$finalModel
v <-varImp(fm, Scale=TRUE)
v$varnames<-rownames(v)
v$Overall<-v$"1"
p<-ggplot(v, aes(x=reorder(varnames,Overall), y=Overall)) +
geom_bar(stat='identity') +
coord_flip()+
xlab("")+
ylab("relative importance")+
ggtitle("Variable importance for positive responses")
ggsave("../scoreFiles/varImp_response.png",p, dpi=100)
# Third Scoring Model: Profit of people who responded ###########################
testing <- read.csv(file = referenceTrainingPath, header = TRUE,
na.strings=c("NA","999"))
#cleaning the testing data for scoring model
testing=testing[testing$responded=="yes",]
testing$profit[is.na(testing$profit)]<-0
testing$profit=testing$profit-costPerContact
testing$schooling[is.na(testing$schooling)]<-"unknown"
testing$custAge[is.na(testing$custAge)]<-mean(testing$custAge, na.rm=TRUE)
testing$logcustAge<-log(testing$custAge)
testing$pmonths <-NULL
testing$responded<-NULL
dummy <- dummyVars(~., data=testing)
testing_dummied <- data.frame(predict(dummy, testing))
testing_dummied$id<-NULL
testing_dummied$profession.unknown<-NULL
testing_dummied$marital.unknown<-NULL
testing_dummied$schooling.unknown<-NULL
testing_dummied$default.unknown<-NULL
testing_dummied$housing.unknown<-NULL
testing_dummied$loan.unknown<-NULL
rf <- train(profit~., data=testing_dummied,
method = "rf",
trControl = trainControl(method = "oob"),
importance = TRUE,
verbose = TRUE )
fm <- rf$finalModel
v <-varImp(fm, Scale=TRUE)
v$varnames<-rownames(v)
p<-ggplot(v, aes(x=reorder(varnames,Overall), y=Overall)) +
geom_bar(stat='identity') +
coord_flip()+
xlab("")+
ylab("relative importance")+
ggtitle("Variable importance for profit")
ggsave("../scoreFiles/varImp_profit.png",p, dpi=100)
# Candidate scoring: ############################################
candidate <- read.csv(file = candidateTestPath, header = TRUE)
testing <- read.csv(file = referenceTrainingPath, header = TRUE)
if("id" %in% names(candidate)) candidate <- candidate[order(candidate$id),]
stopifnot(ncol(candidate) == 23 | ncol(candidate) == 22)
stopifnot(nrow(candidate) == nrow(testing))
#Make sure correct columns are present, try to find market column
colDiff <- function(df1, df2, colsToExclude) {
r1 <- setdiff(colnames(df1), colnames(df2))
r2 <- setdiff(colnames(df2), colnames(df1))
allCol <- union(r1, r2)
keepCol <- !(allCol %in% colsToExclude)
return(allCol[keepCol])
}
colCorrect <- function(candidate, testing){
if(!("market" %in% colnames(candidate)))
{
colsToExclude <- c('profit', 'responded', 'X')
cols <- (colDiff(candidate, testing, colsToExclude))
if (length(cols)==1)
{
marketColName <- cols[1]
candidate$market <- candidate[,marketColName]
} else  {
stop(paste("Candidate is missing multiple columns including 'market'
and these columns:", cols))
}
} else  {
colsToExclude <- c('profit', 'responded', 'X','market')
cols <- (colDiff(candidate, testing, colsToExclude))
if (length(cols>0))
{
warning(paste("Candidate added or is missing these columns:", cols))
}
}
return(candidate)
}
candidate<-colCorrect(candidate, testing)
colsToExclude <- c('profit', 'responded', 'X','market')
cols <- (colDiff(candidate, testing, colsToExclude))
# TODO: Match the candidate and testing files by id
marketVals <- table(candidate$market, useNA = 'always')
numMissing <- marketVals[is.na(names(marketVals))]
# Ensure they are only inputting 0 and 1 for market
replaceMarketVals<-function(candidate){
if (names(marketVals[1:2]) != c("0", "1")){
candidate$market<-as.character(candidate$market)
candidate$market[candidate$market == 'yes'] <- "1"
candidate$market[candidate$market == 'no'] <- "0"
candidate$market[candidate$market == 'True'] <- "1"
candidate$market[candidate$market == 'False'] <- "0"
candidate$market<-as.numeric(candidate$market)
}
return(candidate)
}
candidate<-replaceMarketVals(candidate)
### Score Dollar amts
calcProfit <- function(market, responded, profit, costPerContact){
if(responded == 'yes') {
response = 1
} else {
response = 0
}
if(is.na(profit)) {
prof = 0
} else {
prof = profit
}
net_profit<-market * response * prof - costPerContact * market
return(net_profit)
}
candidate_profit <- rep(NA, nrow(candidate))
for(i in 1:nrow(candidate)){
p =   calcProfit(market = candidate$market[i]
, responded = testing$responded[i]
, profit = testing$profit[i]
, costPerContact = costPerContact)
candidate_profit[i] <- p
}
candidate[,'candidate_profit'] <-candidate_profit
candidate[,'actual_responded'] <- testing$responded
candidate[,'actual_profit'] <- testing$profit
candidateProf <- sum(candidate$candidate_profit, na.rm = TRUE)
# Compute profit statistics
profitCallEveryone <- sum(candidate$actual_profit, na.rm = TRUE) - costPerContact * nrow(candidate)
#profitCallEveryone
# Filter for people who have a profit <> NA and greater than costPerContact
idx <- complete.cases(candidate$actual_profit)
df <- candidate[idx,]
profitable <- df[df$actual_profit > costPerContact, ]
summary(profitable$actual_profit)
nrow(profitable)
maxPossibleProfit <- sum(profitable$actual_profit) - costPerContact * nrow(profitable)
#maxPossibleProfit
####### Write the final results to a file
genFileName <- function(candidateName, ext = '.txt') {
cleanName <- gsub(pattern = ' ', replacement = '_', x = candidateName)
cleanDate <- gsub(pattern = '-', replacement = '_', x = Sys.Date())
genName <- paste(cleanName,'_', cleanDate, ext, sep = '' )
return(genName)
}
# Create the folder to store the outputs
genFolder <- function(outputPath, candidateName){
cleanName <- gsub(pattern = ' ', replacement = '_', x = candidateName)
cleanDate <- gsub(pattern = '-', replacement = '_', x = Sys.Date())
genName <- paste(cleanName,'_', cleanDate, sep = '' )
dir.create(path = file.path(outputPath, genName))
setwd(file.path(outputPath, genName))
getwd()
}
genFolder(outputPath, candidateName)
#### Create plots of the data
jpeg('boxplot_profit.jpg')
boxplot(candidate_profit ~ market, data = candidate
, main = 'Distribution of Candidate Profit'
, xlab = "Market or Not"
)
dev.off()
jpeg('hist_prof.jpg')
h1 <- hist(candidate[candidate$market == 1, 'candidate_profit']
, freq = TRUE
, labels = FALSE
)
h2 <- hist(candidate$actual_profit
, freq = TRUE
, labels = FALSE)
color1 = rgb(0,0,1,1/4)
color2 = rgb(1,0,0,1/4)
plot(h1
, col= color1
, main = 'Distribution of Candidate (Marketed) vs Actual Profit'
)
plot(h2, col= color2
, add = TRUE
)
legend('topleft', c('Candidate', 'Actual'), fill = c(color1, color2))
dev.off()
createRow <-function(item1, item2){
return(paste(item1, item2, sep = " : "))
}
fileCon <- file(genFileName(candidateName))
linesToWrite <- c(
createRow("Candidate Name", candidateName)
, createRow("Scoring Date", Sys.Date())
, createRow("Column Difference", cols)
, createRow("Row Diff", nrow(candidate) - nrow(testing))
, createRow("Pct. Market", mean(candidate$market))
, createRow("Num Missing", numMissing)
, createRow("Candidate Profit", candidateProf)
, createRow("Call Everyone Profit", profitCallEveryone)
, createRow("Max Possible Profit", maxPossibleProfit)
)
writeLines(text = linesToWrite, con = fileCon, sep = '\n\n')
close(fileCon)
write.csv(x = marketVals, file = "marketValues.csv", col.names = TRUE)
write.csv(x = candidate, file = "candidateScored.csv", col.names = TRUE)
#Create file to append multiple scores #######################
scoringAggregateFile<-"Scoring_All_Candidates.txt"
setwd(file.path('../'))
getwd()
scoreDate<-Sys.Date()
if(file.exists("Scoring_All_Candidates.txt")){
scoreTable <- read.table(file = scoringAggregateFile, header = TRUE)
newrow = data.frame(Candidate_Name=as.character(candidateName),
Score_Date=as.character(scoreDate), Score=candidateProf)
scoreTable = rbind(scoreTable,newrow)
} else{
scoreTable= data.frame(Candidate_Name=as.character(candidateName),
Score_Date=as.character(scoreDate), Score=candidateProf)
}
write.table(scoreTable, scoringAggregateFile, sep="\t")
setwd('../scripts')
